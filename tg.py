import config #In this file, the token variable contains the token of our bot
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import dispatcher
from aiogram.utils import executor
from random import randint


class TheBestBotInTheWorld():

    def __init__(self):
        self.token = config.token
        self.bot = Bot(self.token)
        self.dp = Dispatcher(bot=self.bot)

    def start(self):
        @self.dp.message_handler(commands=['start'])
        async def start(messsage: types.Message):
            await messsage.answer('–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç @king_offkaif\n'
                                  '–ë–æ—Ç —É–º–µ–µ—Ç —Ä–µ—à–∞—Ç—å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–µ–Ω—ã–µ –∑–∞–¥–∞—á–∏, –∞ —Ç–∞–∫–∂–µ —Ç–∏–ø–æ –ø–æ—Å–º–µ—è—Ç—å—Å—è\n'
                                  '–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /tasks, –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á\n'
                                  '–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /mems –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–º–µ—Ä–µ—Ç—å –æ—Ç –º–µ–º–æ–≤üòé\n'
                                  '–ê –∫—Ä–æ–º–µ —ç—Ç–æ–≥–æ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ /video, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç\n'
                                  '–ø—Ä–∏–∫–æ–ª—å–Ω—ã–π –≤–∏–¥–æ—Å–∏–∫, –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µü§®\n'
                                  '–ö–æ–º–∞–Ω–¥–∞ /information —É–∑–Ω–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n')

        @self.dp.message_handler(commands=['information'])
        async def information(message):
            await message.answer(f'–Ø –ø—Ä–æ–±–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n\nId —á–∞—Ç–∞: {message.chat.id}\n'
                                 f'Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}\n'
                                 f'–ò–º—è: {str(message.from_user.first_name)}\n'
                                 f'–§–∞–º–∏–ª–∏—è: {str(message.from_user.last_name)}\n'
                                 f'–ü—Å–µ–≤–¥–æ–Ω–∏–º: {str(message.from_user.username)}\n\n')


        @self.dp.message_handler(commands=['mems'])
        async def memes(message: types.Message):
            with open(f'innopolis_bot_memes\photos\{randint(1, 24)}.jpg', 'rb') as photo:
                await message.answer_photo(photo=photo)

        @self.dp.message_handler(commands=['video'])
        async def memes(message: types.message):
            with open('innopolis_bot_memes\\videos\good_video.mp4', 'rb') as vid:
                await message.answer_video(video=vid)

        @self.dp.message_handler(commands=['tasks'])
        async def tasks(message: types.message):
            await message.answer("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á(–µ—Å—Ç—å –∫–æ–¥ –¥–ª—è –Ω–∏—Ö, –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞ –∑–∞–¥–∞—á)\n"
                                 "1)–†–µ—à–µ—Ç–æ —ç—Ä–∞—Ç–æ—Å—Ñ–µ–Ω–∞ /sieve\n"
                                 "2)–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Ç—å —Ñ–∏–±–æ–Ω–∞—á—á–∏ /fib\n"
                                 "3)–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ(—è–≤–ª—è–µ—Ç—Å—è\–Ω–µ —è–≤–ª—è–µ—Ç—Å—è) /easy\n"
                                 "4)–†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç –ê –¥–æ –í /rand\n"
                                 "5)–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å(–≤–≤–æ–¥ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª) /sorting\n"
                                 "6)–°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ [ 18, 14, 10, 6, 2 ]  —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ range()  /list_range\n"
                                 "7)–ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ—á–∫—É /reversing\n"
                                 "8)–§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ /file\n"
                                 "9)–ó–∞–¥–∞—á–∞ –Ω–∞ —Å—Ç–µ–∫ /stack\n"
                                 "10)–ó–∞–¥–∞—á–∞ –Ω–∞ –¥–µ–∫ /deq\n"
                                 "11)–ü–æ–ª–∏–≥–ª–æ—Ç—ã(—Å–ª–æ–≤–∞—Ä–∏) /sets\n")

        @self.dp.message_handler(commands='sieve')
        async def sieve(message: types.message):
            await message.answer("–£—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏:\n"
                                 "–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É,–∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —á–∏—Å–ª–æ n –∏ –≤—ã–≤–æ–¥–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 2 –¥–æ n.\n"
                                 "–î–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª –Ω–µ –±–æ–ª—å—à–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ n, —Å–ª–µ–¥—É—è –º–µ—Ç–æ–¥—É –≠—Ä–∞—Ç–æ—Å—Ñ–µ–Ω–∞, –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n"
                                 " 1)–í—ã–ø–∏—Å–∞—Ç—å –ø–æ–¥—Ä—è–¥ –≤—Å–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –æ—Ç 2 –¥–æ n (2p, 3p, 4p,..., ).\n"
                                 " 2)–ü—É—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è p –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Ä–∞–≤–Ω–∞ 2 ‚Äî –ø–µ—Ä–≤–æ–º—É –ø—Ä–æ—Å—Ç–æ–º—É —á–∏—Å–ª—É.\n"
                                 " 3)–ó–∞—á–µ—Ä–∫–Ω—É—Ç—å –≤ —Å–ø–∏—Å–∫–µ —á–∏—Å–ª–∞ –æ—Ç 2p –¥–æ n —Å—á–∏—Ç–∞—è —à–∞–≥–∞–º–∏ –ø–æ p (—ç—Ç–æ –±—É–¥—É—Ç —á–∏—Å–ª–∞ –∫—Ä–∞—Ç–Ω—ã–µ p: 2p, 3p, 4p,...).\n"
                                 " 4)–ù–∞–π—Ç–∏ –ø–µ—Ä–≤–æ–µ –Ω–µ–∑–∞—á—ë—Ä–∫–Ω—É—Ç–æ–µ —á–∏—Å–ª–æ –≤ —Å–ø–∏—Å–∫–µ, –±–æ–ª—å—à–µ–µ —á–µ–º p, –∏ –ø—Ä–∏—Å–≤–æ–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—é –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π p —ç—Ç–æ —á–∏—Å–ª–æ.\n"
                                 " 5)–ü–æ–≤—Ç–æ—Ä—è—Ç—å —à–∞–≥–∏ 3 –∏ 4, –ø–æ–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ.\n"
                                 "–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–¥–∞ –∑–∞–¥–∞—á–∏ - /sev_code\n")
            await message.answer("–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
                                 "10\n"
                                 "–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
                                 "4")

        @self.dp.message_handler(commands=['sev_code'])
        async def sev_examination(message: types.message):
            await message.answer('def sieve(n):\n'
                                 '  prime = [True] * (n + 1)\n'
                                 '  for i in range(2, n + 1):\n'
                                 '  if prime[i]:\n'
                                 '  for j in range(i ** 2, n + 1, i):\n'
                                 '  prime[j] = False\n'
                                 '  last = prime.count(True) - 2\n'
                                 '  return last\n'
                                 'print(sieve(int(input())))')
            await message.answer("–î–∞–Ω–Ω—ã–π –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ codefoces.com\n"
                                 "–ó–∞–¥–∞—á–∞ –≤–∑—è—Ç–∞ —Å https://codeforces.com/group/N6UYx1b3Cf/contest/389708/problem/A")

        @self.dp.message_handler(commands=['fib'])
        async def sieve(message: types.message):
            await message.answer('–£—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏:\n'
                                 '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —á–∏—Å–ª–æ —á–ª–µ–Ω–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –§–∏–±–æ–Ω–∞—á—á–∏\n'
                                 '–∏ –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Ä–µ–∫—É—Ä—Å–∏–∏ –≤—ã—á–∏—Å–ª—è–µ—Ç –≤—Å–µ —á–∏—Å–ª–∞, –≤—Ö–æ–¥—è—â–∏–µ –≤ —ç—Ç—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å.\n'
                                 '–ù—É–∂–Ω–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å —Å–∞–º—É —Ñ—É–Ω–∫—Ü–∏—é\n'
                                 '–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–¥–∞ –∑–∞–¥–∞—á–∏ - /fib_code\n'
                                 )
            await message.answer('–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n'
                                 '10\n'
                                 '–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n'
                                 '1 1 2 3 5 8 13 21 34 55')

        @self.dp.message_handler(commands=['fib_code'])
        async def fib_code(message: types.message):
            await message.answer('def fibonacci(n):\n'
                                 '    if n in (1, 2):\n'
                                 '        return 1\n'
                                 '    return fibonacci(n - 1) + fibonacci(n - 2)\n'
                                 )

        @self.dp.message_handler(commands=['easy'])
        async def easy(message: types.message):
            await message.answer("–£—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏:\n"
                                 "–ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–∏—Å–ª–æ –Ω–∞ –ø—Ä–æ—Å—Ç–æ—Ç—É\n"
                                 "—Ç.–µ. —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω–æ –ø—Ä–æ—Å—Ç—ã–º –∏–ª–∏ –Ω–µ—Ç.\n"
                                 "–≤—ã–≤–µ—Å—Ç–∏ True - –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞, –∏–Ω–∞—á–µ False\n"
                                 "–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–¥–∞ –∑–∞–¥–∞—á–∏ - /easy_code")
            await message.answer("–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
                                 "7\n"
                                 "–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
                                 "True")
            await message.answer("–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
                                 "10\n"
                                 "–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
                                 "False")

        @self.dp.message_handler(commands=['easy_code'])
        async def easy_cod(message: types.message):
            await message.answer("n = int(input())\n"
                                 "flag = True\n"
                                 "for i in range(2, int(n ** 0.5) + 1):\n"
                                 "    if n % i == 0:\n"
                                 "        flag = False\n"
                                 "print(flag)")

        @self.dp.message_handler(commands=['rand'])
        async def rand(message: types.message):
            await message.answer("–£—Å–ª–æ–≤–∏–µ –∑–∞–¥—á–∏:\n"
                                 "–ù–∞ –≤—Ö–æ–¥ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–∞ —á–∏—Å–ª–∞: –ê –∏ –í\n"
                                 "–ù—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç –ê –¥–æ –í\n"
                                 "–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–¥–∞ –∑–∞–¥–∞—á–∏ - /rand_code")
            await message.answer("–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:n"
                                 "5\n"
                                 "7\n"
                                 "–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
                                 "6")

        @self.dp.message_handler(commands=['rand_code'])
        async def rand_code(message: types.message):
            await message.answer("import random\n"
                                 "a = int(input())\n"
                                 "b = int(input())\n"
                                 "print(random.randint(a, b))"
                                 )

        @self.dp.message_handler(commands=['sorting'])
        async def sorting(message: types.message):
            await message.answer("–í–∞–º –¥–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª\n"
                                 "–ù—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –µ—ë –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π(—Ç–æ–ª—å–∫–æ –¥–∞–≤–∞–π—Ç–µ –±–µ–∑ sorted)\n"
                                 "–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–¥–∞ –∑–∞–¥–∞—á–∏ - /sorting_code")
            await message.answer("–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
                                 "1 2 6 7 9 15 68 0\n"
                                 "–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
                                 "0 1 2 6 7 9 15 68")

        @self.dp.message_handler(commands=['sorting_code'])
        async def sorting_code(message: types.message):
            await message.answer('def merge(left, right):\n'
                                 '    res = list()\n'
                                 '    i, j = 0, 0\n'
                                 '    while i < len(left) and j < len(right):\n'
                                 '        if left[i] < right[j]:\n'
                                 '            res.append(left[i])\n'
                                 '            i += 1\n'
                                 '        else:\n'
                                 '            res.append(right[j])\n'
                                 '            j += 1\n'
                                 '    while i < len(left):\n'
                                 '        res.append(left[i])\n'
                                 '        i += 1\n'
                                 '    while j < len(right):\n'
                                 '        res.append(right[j])\n'
                                 '        j += 1\n'
                                 '    return res\n'
                                 'def merge_sort(lst):\n'
                                 '    if len(lst) <= 1:\n'
                                 '        return lst\n'
                                 '    left = merge_sort(lst[:len(lst) // 2])\n'
                                 '    right = merge_sort(lst[len(lst) // 2:])\n'
                                 '    return merge(left, right)\n'
                                 'n = int(input())\n'
                                 'lst = list(map(int, input().split()))\n'
                                 'print(*merge_sort(lst))')
            await message.answer("–î–∞–Ω–Ω—ã–π –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ codefoces.com\n"
                                 "–ó–∞–¥–∞—á–∞ –≤–∑—è—Ç–∞ —Å: https://codeforces.com/group/N6UYx1b3Cf/contest/103851/problem/B")

        @self.dp.message_handler(commands=['list_range'])
        async def list_range(message: types.message):
            await message.answer("–£—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏:\n"
                                 "–°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ [ 18, 14, 10, 6, 2 ]  —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ range()\n"
                                 "–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–¥–∞ –∑–∞–¥–∞—á–∏ -  /list_range_code")
            await message.answer("–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
                                 "–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
                                 "18 14 10 6 2")

        @self.dp.message_handler(commands=['list_range_code'])
        async def list_range_code(message: types.message):
            await message.answer("lst = []\n"
                                 "for i in range(18, 1, -4):\n"
                                 "    lst.append(i)\n"
                                 "print(lst)")

        @self.dp.message_handler(commands=['reversing'])
        async def reversing(message: types.message):
            await message.answer("–£—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏:\n"
                                 "–ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ—á–∫—É\n"
                                 "–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–¥–∞ –∑–∞–¥–∞—á–∏ - /reversing_code")
            await message.answer("–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
                                 "–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç!\n"
                                 "–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
                                 "!—Ç–µ–≤–∏—Ä–ø –º–µ—Å–í")

        @self.dp.message_handler(commands=['reversing_code'])
        async def reversing_code(message: types.message):
            await message.answer("s = str(input())\n"
                                 "print(s[::-1])")

        @self.dp.message_handler(commands=['file'])
        async def file(message: types.message):
            await message.answer("event - –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å —Ç–µ–∫—Å—Ç–æ–º —Å–æ–±—ã—Ç–∏—è\n"
                                 "file_name - –∏–º—è —Ñ–∞–π–ª–∞ —Å –ª–æ–≥–æ–º\n"
                                 "–§–∞–π–ª —Å –ª–æ–≥–æ–º —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø–∏—Å–∏ –æ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –≤–∏–¥–∞:\n\n"

                                 "event 3 - 'git log -2'\n"
                                 "event 2 - 'git log'\n"
                                 "event 1 - 'git status'\n"
                                 "–ü—Ä–∏–º–µ—Ä –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è:\n\n"

                                 'git fetch origin\n'
                                 '–î–æ–ø–æ–ª–Ω–∏—Ç–µ –ª–æ–≥ –≤ —Ñ–∞–π–ª–µ —Ç–∞–∫, —á—Ç–æ–±—ã –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –±—ã–ª–æ –∑–∞–ø–∏—Å–∞–Ω–æ –≤–≤–µ—Ä—Ö—É. –ù–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è.\n\n'

                                 "event 4 - 'git fetch origin'\n"
                                 "event 3 - 'git log -2'\n"
                                 "event 2 - 'git log'\n"
                                 "event 1 - 'git status'\n"
                                 '–ï—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø–∏—Å–µ–π, –Ω–∞—á–Ω–∏—Ç–µ –Ω—É–º–µ—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è —Å 1.\n\n'

                                 '–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫!\n\n\n'



                                 '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –ø—É—Ç—å –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∫–∞—Ç–∞–ª–æ–≥. –¢.–µ. —Å–∏—Ç—É–∞—Ü–∏—è –∫–æ–≥–¥–∞ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –∏ –µ–≥–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∞.\n\n'
                                 '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ import os.path\n'
                                 '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –í –ª–æ–≥–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏\n'
                                 "P.S –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∫—É—Ä—Å–∞, –≤ –∑–∞–¥–∞—á–∏ –ø–µ—Ä–º–µ–Ω–Ω—ã–µ —É–∂–µ –¥–∞–Ω—ã.\n"
                                 "–ù–∏—á–µ–≥–æ –≤–≤–æ–¥–∏—Ç—å –Ω–µ –Ω–∞–¥–æ\n"
                                 "–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–¥–∞ –∑–∞–¥–∞—á–∏ - /file_code")
            await message.answer("–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö 1:\n\n"

                                 'event = "git fetch origin"\n'
                                 'file_name = "tmp/git.log"\n'
                                 "'–í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö 1:\n\n'"

                                 "'event 4 - 'git fetch origin'\n'"
                                 "'event 3 - 'git log -2'\n'"
                                 "'event 2 - 'git log'\n'"
                                 "'event 1 - 'git status'\n'"
                                 "'–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö 2:\n\n'"

                                 'event = "git fetch origin"\n'
                                 'file_name = "tmp/empty_git.log"\n'
                                 "'–í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö 2:\n\n'"

                                 "'event 1 - 'git fetch origin'\n'"
                                 "'–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö 3:\n\n'"

                                 'event = "2020_02_05 15_05_31"\n'
                                 'file_name = "tmp/access.log"\n'
                                 "'–í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö 3:\n\n'"

                                 "'event 3 - '2020_02_05 15_05_31'\n'"
                                 "'event 2 - '2020_02_05 15_05_30'\n\n'"

                                 "event 1 - '2020_02_01 15_05_31'")

        @self.dp.message_handler(commands=['file_code'])
        async def file_code(message: types.message):
            await message.answer("import os.path\n\n"
                                 "if os.path.isfile(file_name):\n"
                                 "   with open(file_name, 'r', encoding = 'utf-8') as f:\n"
                                 "        s = [i.strip() for i in f.readlines()]\n"
                                 "        lenq = 0\n"
                                 "        for i in s:\n"
                                 "            if len(i) > 0:\n"
                                 "                lenq += 1\n"
                                 "        if lenq == 0:\n"
                                 "            with open(file_name, 'w', encoding = 'utf-8') as f:\n"
                                 '                st = f\"event {lenq + 1} - \'{event}\''
                                 "        else:\n"
                                 "            lst = list()\n"
                                 '            st = f\"event {lenq + 1} - \'{event}\'\"\n'
                                 "            lst.append(st)\n"
                                 "            for i in s:\n"
                                 "                lst.append(i)\n"
                                 "   with open(file_name, 'w', encoding = 'utf-8') as f:\n"
                                 "        f.seek(0)\n"
                                 "        for i in lst:\n"
                                 "            f.write(i + \''\\n'\')\n"
                                 "else:\n"
                                 "    with open(file_name, 'w', encoding = 'utf-8') as f:\n"
                                 "        s = f\"event 1 - \'{event}\'\"\n"
                                 "        f.write(s + \'\\n\')\n")

            await message.answer("–î–∞–Ω–Ω—ã–π –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ https://stepik.org/\n"
                                 "–ó–∞–¥–∞—á–∞ –≤–∑—è—Ç–∞ —Å https://stepik.org/lesson/305015/step/15?unit=287494")

        @self.dp.message_handler(commands=['stack'])
        async def stack(message: types.message):
            await message.answer('–ü—Ä–æ—Å—Ç–æ–π —Å—Ç–µ–∫\n'
                                 '–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö "—Å—Ç–µ–∫". –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–µ–∫–∞\n'
                                 '–∏ –º–æ–¥–µ–ª–∏—Ä—É—é—â—É—é —Ä–∞–±–æ—Ç—É —Å—Ç–µ–∫–∞, —Ä–µ–∞–ª–∏–∑–æ–≤–∞–≤ –≤—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–¥–µ—Å—å –º–µ—Ç–æ–¥—ã.  –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥\n'
                                 '–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–º–∞–Ω–¥—ã –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ç—É –∏–ª–∏ –∏–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é.\n'
                                 '–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –æ–¥–Ω—É —Å—Ç—Ä–æ—á–∫—É. –í–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã:\n\n'

                                 'push n\n\n'

                                 '–î–æ–±–∞–≤–∏—Ç—å –≤ —Å—Ç–µ–∫ —á–∏—Å–ª–æ n (–∑–Ω–∞—á–µ–Ω–∏–µ n –∑–∞–¥–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã). –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ ok.\n'

                                 'pop\n\n'

                                 '–£–¥–∞–ª–∏—Ç—å –∏–∑ —Å—Ç–µ–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ.\n\n'

                                 'back\n\n'

                                 '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, –Ω–µ —É–¥–∞–ª—è—è –µ–≥–æ –∏–∑ —Å—Ç–µ–∫–∞.\n\n'

                                 'size\n\n'

                                 '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å—Ç–µ–∫–µ.\n\n'

                                 'clear\n\n'

                                 '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–µ–∫ –∏ –≤—ã–≤–µ—Å—Ç–∏ ok.\n\n'

                                 'exit\n\n'

                                 '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ bye –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É.\n\n'

                                 '–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n'

                                 '–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–µ–∫–æ–º –≤–≤–æ–¥—è—Ç—Å—è –≤ –æ–ø–∏—Å–∞–Ω–Ω–æ–º —Ä–∞–Ω–µ–µ —Ñ–æ—Ä–º–∞—Ç–µ –ø–æ 1 –Ω–∞ —Å—Ç—Ä–æ–∫–µ.\n\n'

                                 '–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –Ω–∞–±–æ—Ä –≤—Ö–æ–¥–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:\n'
                                 '–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å—Ç–µ–∫–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –Ω–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç 100,\n'
                                 '–≤—Å–µ –∫–æ–º–∞–Ω–¥—ã pop –∏ back –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, —Ç–æ –µ—Å—Ç—å –ø—Ä–∏ –∏—Ö –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤ —Å—Ç–µ–∫–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç.\n\n'

                                 '–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n'

                                 '–¢—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–≤–µ—Å—Ç–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–µ–∫–æ–º, –ø–æ 1 —Å–æ–æ–±—â–µ–Ω–∏—é –≤ —Å—Ç—Ä–æ–∫–µ\n'
                                 '–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–¥–∞ –∑–∞–¥–∞—á–∏ - /stack_code\n')

            await message.answer('–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö:\n\n'
                                 'push 3\n'
                                 'push 14\n'
                                 'size\n'
                                 'clear\n'
                                 'push 1\n'
                                 'back\n'
                                 'push 2\n'
                                 'back\n'
                                 'pop\n'
                                 'size\n'
                                 'pop\n'
                                 'size\n'
                                 'exit\n'
                                 '–í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö:\n\n'
                                 'ok\n'
                                 'ok\n'
                                 '2\n'
                                 'ok\n'
                                 'ok\n'
                                 '1\n'
                                 'ok\n'
                                 '2\n'
                                 '2\n'
                                 '1\n'
                                 '1\n'
                                 '0\n'
                                 'bye')

        @self.dp.message_handler(commands=['stack_code'])
        async def stack_code(message: types.message):
            await message.answer("k = list()\n"
                                 "stackHIH = list()\n"
                                 "while True:\n"
                                 "    a =  input()\n"
                                 "    if a == 'exit':\n"
                                 "        break\n"
                                 "    if 'push' in a:\n"
                                 "        a,b = a.split()\n"
                                 "        stackHIH.append(b)\n"
                                 "        print('ok')\n"
                                 "    elif a == 'pop':\n"
                                 "        print(stackHIH.pop())\n"
                                 "    elif a == 'back':\n"
                                 "        print(stackHIH[-1])\n"
                                 "    elif a == 'size':\n"
                                 "        print(len(stackHIH))\n"
                                 "    elif a == 'clear':\n"
                                 "        stackHIH.clear()\n"
                                 "        print('ok')\n"
                                 "print('bye')\n")
            await message.answer("–î–∞–Ω–Ω—ã–π –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ https://stepik.org/\n"
                                 "–ó–∞–¥–∞—á–∞ –≤–∑—è—Ç–∞ —Å https://stepik.org/lesson/389230/step/4?unit=378335")

        @self.dp.message_handler(commands=['deq'])
        async def deq(message: types.message):
            await message.answer('–ü—Ä–æ—Å—Ç–∞—è –æ—á–µ—Ä–µ–¥—å\n'
                                 '–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö "–æ—á–µ—Ä–µ–¥—å".\n'
                                 '–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é –æ–ø–∏—Å–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –∏ –º–æ–¥–µ–ª–∏—Ä—É—é—â—É—é —Ä–∞–±–æ—Ç—É –æ—á–µ—Ä–µ–¥–∏,\n'
                                 '—Ä–µ–∞–ª–∏–∑–æ–≤–∞–≤ –≤—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–¥–µ—Å—å –º–µ—Ç–æ–¥—ã. –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥ –∏\n'
                                 '–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–º–∞–Ω–¥—ã –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ç—É –∏–ª–∏ –∏–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é. –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã\n'
                                 '–ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –æ–¥–Ω—É —Å—Ç—Ä–æ—á–∫—É. –í–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã:\n\n'

                                 'push n\n\n'

                                 '–î–æ–±–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å —á–∏—Å–ª–æ n (–∑–Ω–∞—á–µ–Ω–∏–µ n –∑–∞–¥–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã). –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ ok.\n\n'

                                 'pop\n\n'

                                 '–£–¥–∞–ª–∏—Ç—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ.\n\n'

                                 'front\n\n'

                                 '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, –Ω–µ —É–¥–∞–ª—è—è –µ–≥–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏.\n\n'

                                 'size\n\n'

                                 '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏.\n\n'

                                 'clear\n\n'

                                 '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –æ—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –∏ –≤—ã–≤–µ—Å—Ç–∏ ok.\n\n'

                                 'exit\n\n'

                                 '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ bye –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É.\n\n'

                                 '–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –Ω–∞–±–æ—Ä –≤—Ö–æ–¥–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:\n'
                                 '–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –Ω–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç 100,\n'
                                 '–≤—Å–µ –∫–æ–º–∞–Ω–¥—ã pop –∏ front –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, —Ç–æ –µ—Å—Ç—å –ø—Ä–∏ –∏—Ö –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏\n'
                                 '–≤ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç.\n\n'

                                 '–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n'

                                 '–í–≤–æ–¥—è—Ç—Å—è –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é, –ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫–µ\n\n'

                                 '–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n'

                                 '–¢—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–≤–µ—Å—Ç–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª —Ä–∞–±–æ—Ç—ã —Å –æ—á–µ—Ä–µ–¥—å—é, –ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –Ω–∞ —Å—Ç—Ä–æ–∫–µ'
                                 "–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–¥–∞ –∑–∞–¥–∞—á–∏ - /deq_code\n")
            await message.answer('–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö:\n\n'
                                 'size\n'
                                 'push 1\n'
                                 'size\n'
                                 'push 2\n'
                                 'size\n'
                                 'push 3\n'
                                 'size\n'
                                 'exit\n\n'

                                 '–í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö:\n\n'

                                 '0\n'
                                 'ok\n'
                                 '1\n'
                                 'ok\n'
                                 '2\n'
                                 'ok\n'
                                 '3\n'
                                 'bye')

        @self.dp.message_handler(commands=['deq_code'])
        async def deq(message: types.message):
            await message.answer('from collections import deque\n'
                                 'deq = deque()\n'
                                 'while True:\n'
                                 '    n = input()\n'
                                 '    if n == "exit":\n'
                                 '        break\n'
                                 '    elif "push" in n:\n'
                                 '        a, b = n.split()\n'
                                 '        deq.append(int(b))\n'
                                 '        print("ok")\n'
                                 '    elif n == "pop":\n'
                                 '        print(deq.popleft())\n'
                                 '    elif n == "front":\n'
                                 '        print(deq[0])\n'
                                 '    elif n == "size":\n'
                                 '        print(len(deq))\n'
                                 '    elif n == "clear":\n'
                                 '        deq.clear()\n'
                                 '        print("ok")\n'
                                 'print("bye")')
            await message.answer("–î–∞–Ω–Ω—ã–π –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ https://stepik.org/\n"
                                 "–ó–∞–¥–∞—á–∞ –≤–∑—è—Ç–∞ —Å https://stepik.org/lesson/389076/step/4?unit=378185")

        @self.dp.message_handler(commands=['sets'])
        async def sets(message: types.message):
            await message.answer('–ü–æ–ª–∏–≥–ª–æ—Ç—ã\n'
                                 '–ö–∞–∂–¥—ã–π –∏–∑ N —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ –Ω–µ–∫–æ—Ç–æ—Ä–æ–π —à–∫–æ–ª—ã –∑–Ω–∞–µ—Ç Mi —è–∑—ã–∫–æ–≤. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ,\n'
                                 '–∫–∞–∫–∏–µ —è–∑—ã–∫–∏ –∑–Ω–∞—é—Ç –≤—Å–µ —à–∫–æ–ª—å–Ω–∏–∫–∏ –∏ —è–∑—ã–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–Ω–∞–µ—Ç —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–∑ —à–∫–æ–ª—å–Ω–∏–∫–æ–≤.\n'

                                 '–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n'

                                 '–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ N.\n'
                                 '–î–∞–ª–µ–µ –∏–¥–µ—Ç N —á–∏—Å–µ–ª M(i), –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∏–∑ —á–∏—Å–µ–ª –∏–¥–µ—Ç M(i) —Å—Ç—Ä–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è —è–∑—ã–∫–æ–≤,\n'
                                 '–∫–æ—Ç–æ—Ä—ã–µ –∑–Ω–∞–µ—Ç i-–π —à–∫–æ–ª—å–Ω–∏–∫. –î–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–π —è–∑—ã–∫–æ–≤ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 1000 —Å–∏–º–≤–æ–ª–æ–≤,\n'
                                 '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —è–∑—ã–∫–æ–≤ –Ω–µ –±–æ–ª–µ–µ 1000. 1  N 1000, 1  M(i) 500.\n\n'

                                 '–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n'

                                 '–í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –≤—ã–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–∑—ã–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∑–Ω–∞—é—Ç –≤—Å–µ —à–∫–æ–ª—å–Ω–∏–∫–∏.\n'
                                 '–ù–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏ - —Å–ø–∏—Å–æ–∫ —Ç–∞–∫–∏—Ö —è–∑—ã–∫–æ–≤. –ó–∞—Ç–µ–º - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–∑—ã–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∑–Ω–∞–µ—Ç —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —à–∫–æ–ª—å–Ω–∏–∫,\n'
                                 '–Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö - —Å–ø–∏—Å–æ–∫ —Ç–∞–∫–∏—Ö —è–∑—ã–∫–æ–≤.\n'
                                 '–í—ã–≤–æ–¥ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.'
                                 '–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–¥–∞ –∑–∞–¥–∞—á–∏ - /sets_code\n')
            await message.answer('–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö:\n\n'
                                 '3\n'
                                 '3\n'
                                 'Russian\n'
                                 'English\n'
                                 'Japanese\n'
                                 '2\n'
                                 'Russian\n'
                                 'English\n'
                                 '1\n'
                                 'English\n'
                                 '–í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö:\n\n'
                                 '1\n'
                                 'English\n'
                                 '3\n'
                                 'English\n'
                                 'Japanese\n'
                                 'Russian')

        @self.dp.message_handler(commands=['sets_code'])
        async def sets_code(message: types.message):
            await message.answer("students = [{input() for j in range(int(input()))} for i in range(int(input()))]\n"
                                 "known_by_everyone, known_by_someone = set.intersection(*students), set.union(*students)\n"
                                 "print(len(known_by_everyone), *sorted(known_by_everyone), sep='\n')\n"
                                 "print(len(known_by_someone), *sorted(known_by_someone), sep='\n')")
            await message.answer("–î–∞–Ω–Ω—ã–π –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ https://stepik.org/\n"
                                 "–ó–∞–¥–∞—á–∞ –≤–∑—è—Ç–∞ —Å https://stepik.org/lesson/389077/step/6?unit=378186")

        executor.start_polling(self.dp, skip_updates=True)


if __name__ == '__main__':
    TheBestBotInTheWorld().start()
